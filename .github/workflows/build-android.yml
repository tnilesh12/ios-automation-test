name: Build and Upload APK/AAB to DigitalOcean Spaces

on:
  # push:
  #   branches:
  #     - master
  # pull_request:
  workflow_dispatch:  # Trigger manually via GitHub Actions
    inputs:
      app_name:
        description: 'The name of the app'
        required: true
      new_package_name:
        description: 'The new package name'
        required: true
      current_package_name:
        description: 'The current package name'
        required: true

jobs:
  build:
    name: Build and Upload to DigitalOcean Spaces
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Java (JDK 11 in this case)
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'

      # Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        # with:
        #   flutter-version: 'stable'

      # Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Run the client configuration script (your shell script)
      - name: Run client configuration script
        run: |
          chmod +x client_config.sh  # Make the script executable
          ./client_config.sh "${{ github.event.inputs.app_name }}" "${{ github.event.inputs.new_package_name }}" "${{ github.event.inputs.current_package_name }}"

      # Decode and setup keystore (from GitHub Secrets)
      - name: Decode and setup keystore
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo $ANDROID_KEYSTORE_BASE64 | base64 --decode > android/app/key.jks

      # Build APK
      - name: Build APK
        run: flutter build apk --release --no-tree-shake-icons

      # Build AAB (Android App Bundle)
      - name: Build AAB
        run: flutter build appbundle --release --no-tree-shake-icons

      # # Sign the APK
      # - name: Sign APK
      #   env:
      #     KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      #     KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      #     KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      #   run: |
      #     jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
      #       -keystore android/app/key.jks \
      #       -storepass $KEYSTORE_PASSWORD \
      #       -keypass $KEY_PASSWORD \
      #       android/app/build/outputs/apk/release/app-release-unsigned.apk $KEY_ALIAS

      # # Zip align APK
      # - name: Zip align APK
      #   run: |
      #     ${ANDROID_HOME}/build-tools/30.0.3/zipalign -v 4 \
      #       android/app/build/outputs/apk/release/app-release-unsigned.apk \
      #       android/app/build/outputs/apk/release/app-release.apk

      # Debugging step: Print the outputs directory
      - name: Check build outputs directory
        run: |
          echo "Listing build outputs..."
          ls -R build/app/outputs
      # #     ls -R build/app/outputs || echo "No build outputs found"

      # # # Check if AAB file exists
      # # - name: Check if AAB file exists
      # #   run: |
      # #     if [ ! -f "build/app/outputs/bundle/release/app-release.aab" ]; then
      # #       echo "AAB file not found!"
      # #       exit 1
      # #     fi

      # # # Upload APK and AAB as artifacts
      # # - name: Upload APK and AAB
      # #   uses: actions/upload-artifact@v3
      # #   with:
      # #     name: app-release
      # #     path: build/app/outputs/**/*
      # #     # path: |
      # #     #   android/app/build/outputs/apk/release/app-release.apk
      # #     #   android/app/build/outputs/bundle/release/app-release.aab

      # # Configure AWS CLI for DigitalOcean Spaces

      # - name: Configure AWS CLI for DigitalOcean Spaces
      #   run: |
      #     aws configure set aws_access_key_id ${{ secrets.DO_SPACES_ACCESS_KEY }}
      #     aws configure set aws_secret_access_key ${{ secrets.DO_SPACES_SECRET_KEY }}
      #     aws configure set default.region ${{ secrets.DO_SPACES_REGION }}
      #     aws configure set default.s3.endpoint-url https://${{ secrets.DO_SPACES_ENDPOINT }}

      # # Upload APK and AAB to DigitalOcean Spaces
      # - name: Upload APK and AAB to DigitalOcean Spaces
      #   run: |
      #     aws s3 cp build/app/outputs/apk/release/app-release.apk s3://mobilify/builds/app-release.apk
      #     aws s3 cp build/app/outputs/bundle/release/app-release.aab s3://mobilify/builds/app-release.aab

      # Install spaces-cli for uploading files to DigitalOcean Spaces
      - name: Install spaces-cli
        run: npm install -g spaces-cli

      # Generate dynamic folder name with client name and timestamp
      - name: Create client folder with timestamp
        id: vars
        run: |
          CLIENT_NAME="${{ github.event.inputs.app_name }}"  # Client name from input
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          echo "folder_name=${CLIENT_NAME}" >> $GITHUB_ENV
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_ENV

      # Upload APK and AAB to DigitalOcean Spaces using spaces-cli
      - name: Upload APK and AAB
        env:
          ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          SPACE: ${{ secrets.S3_SPACE }}
          REGION: ${{ secrets.S3_REGION }}
          FOLDER_NAME: ${{ env.folder_name }}
          TIMESTAMP: ${{ env.timestamp }}
        run: |
          spaces-cli up build/app/outputs/apk/release/app-release.apk \
                      -t /builds/${{ env.folder_name }}/app-release-${{ env.TIMESTAMP }}.apk \
                      -s $SPACE \
                      -r $REGION
          spaces-cli up build/app/outputs/bundle/release/app-release.aab \
                      -t /builds/${{ env.folder_name }}/app-release-${{ env.TIMESTAMP }}.aab \
                      -s $SPACE \
                      -r $REGION
